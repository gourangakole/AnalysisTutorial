Week 1 summary/assignment.

Kick off session where where talked about the goals: ROOT, CMSSW, cms2, z cross section analysis.

Talked about ROOT which is a C++ based set of libraries that work with a C interpreter (CINT).  The relevant ROOT documentation can be found here:
http://root.cern.ch/drupal/
http://root.cern.ch/drupal/content/documentation.  This includes the
http://root.cern.ch/drupal/content/users-guide
http://root.cern.ch/root/html534/ClassIndex.html
http://root.cern.ch/root/html/tutorials/

If you haven't already done so, start reading the accelerated C++ book.  This will make reading CMSSW code easier for you.
http://www.amazon.com/Accelerated-C-Practical-Programming-Example/dp/020170353X

Reading assignment from the ROOT user's guide: read ch 1-3,7,12

I've posted the code for this week in a repository.  I will put code fragments here for documentation: https://github.com/kelleyrw/AnalysisTutorial.

To check out:
git clone https://github.com/kelleyrw/AnalysisTutorial

If you need to learn git, this is an excellent tutorial:
http://git-scm.com/documentation

We went over a simple TTree.  As a reminder, this tree was filled per event and contains a unfiltered list (in the form of a std::vector) of TrackingParticles per event:

Events
  |
  --> list of TrackingParticles
             |
             --> Tracking particle infomation 
             --> Matching reconstructed Track info (bogus values filled if no matching track).

A tracking particle is a composite object that encompasses the sim tracks as they propagate the detector at simulation level.  
The matching is done "by hits" which means that it looks to match the simulated hits from the tracking particle to the reconstructed track's hits.  There are other algorithms to achieve this matching but I only chose one for demonstration.

The tree is small (1000 events) and I was able to check into the repostory (https://github.com/kelleyrw/AnalysisTutorial/blob/master/week1/trees/tracking_ntuple.root). All the branches should be the same size:

// TrakingParticle info
std::vector<LorentzVector> tps_p4:  four momentum
std::vector<int> tps_pdgid:         pdg particle ID code: http://pdg.lbl.gov/2007/reviews/montecarlorpp.pdf
std::vector<double> tps_d0:         transverse impact parameter
std::vector<double> tps_dz:         longitudinal impact parameter
std::vector<bool> tps_matched:      matched to track?  true/false 
std::vector<int> tps_charge:        charge
std::vector<int> tps_nhits:         # of simulated hits

// reco track info
std::vector<LorentzVector> trks_p4:  four momentum
std::vector<double> trks_tip:        transverse impact parameter  (from the TrackingParticle vertex)
std::vector<double> trks_lip:        longitudinal impact parameter  (from the TrackingParticle vertex)
std::vector<double> trks_d0:         transverse impact parameter (using the trajectory builder)
std::vector<double> trks_dz:         longitudinal impact parameter (using the trajectory builder)
std::vector<double> trks_pterr:      pt uncertainty
std::vector<double> trks_d0err:      d0 uncertainty
std::vector<double> trks_dzerr:      dz uncertainty
std::vector<double> trks_chi2:       chi^2 of the track's fit
std::vector<int> trks_ndof:          # degrees of freedom
std::vector<int> trks_nlayers:       # number of valid layers with a measurement
std::vector<bool> trks_high_purity:  # track passes high purity quality requirement

So you should play with TTree::Draw and TTree::Scan (I'll show you this next time).  

Also, read over the other examples we didn't get to cover.  Write down questions about it and we'll go over it next time:
https://github.com/kelleyrw/AnalysisTutorial/tree/master/week1/macros/eff.C
https://github.com/kelleyrw/AnalysisTutorial/tree/master/week1/macros/ovelay.C
https://github.com/kelleyrw/AnalysisTutorial/blob/master/week1/macros/eff_compiled.C
https://github.com/kelleyrw/AnalysisTutorial/blob/master/week1/macros/eff_looper.C

The later two are meant to be compiled.  I haven't covered this yet but try it out:
.L <macro>.C++

So your homework assignment is to see if you can make the efficiency vs eta and vs pt plots from this pdf (upper and middle left plots).  If you get stuck, try the ROOT user guide and/or email me.

Extra credit:

Here are resolution plots:

http://cmsdoc.cern.ch/cms/Physics/tracking/validation/MC/CMSSW_6_1_0/START61_V8_noPU_ootb/RelValTTbar/resolutionsEta.pdf
http://cmsdoc.cern.ch/cms/Physics/tracking/validation/MC/CMSSW_6_1_0/START61_V8_noPU_ootb/RelValTTbar/resolutionsPt.pdf

They are made by x_{reco} - x_{truth}.  See if you can reproduce these.  Hint: check out http://root.cern.ch/root/html/TH2.html#TH2:FitSlicesY

